name: Build and Release

on:
  push:
    branches: [master]

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-windows:
    name: Build Windows installer
    runs-on: lukiwin
    steps:
      - name: Clean previous artifacts
        shell: powershell
        run: Remove-Item -Recurse -Force publish, installer -ErrorAction SilentlyContinue

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Publish Tool
        shell: powershell
        run: |
          dotnet publish "Multi Saves Backup Tool/Multi Saves Backup Tool.csproj" `
            -c Release -r win-x64 --self-contained true `
            -p:PublishSingleFile=true -p:DebugType=None -p:DebugSymbols=false `
            -o "publish/release"

      - name: Build .exe installer
        shell: cmd
        run: '"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss'

      - name: Rename Windows Installer
        id: rename-win
        shell: powershell
        run: |
          if (-Not (Test-Path installer)) { New-Item installer -ItemType Directory } 
          Move-Item installer/*.exe installer/MultiSavesBackupSetup.exe
          Write-Output "::set-output name=file::installer/MultiSavesBackupSetup.exe"

      - name: Verify installer
        shell: cmd
        run: |
          if not exist "installer/MultiSavesBackupSetup.exe" (
            echo Installer file not found! && exit 1
          )

  build-linux:
    name: Build Linux AppImage
    runs-on: lukilinux
    steps:
      - name: Clean previous artifacts
        run: rm -rf publish installer AppDir || true

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Publish Tool
        run: |
          dotnet publish "Multi Saves Backup Tool/Multi Saves Backup Tool.csproj" \
            -c Release -r linux-x64 --self-contained true \
            -p:PublishSingleFile=true -p:DebugType=None -p:DebugSymbols=false \
            -o "publish/linux"

      - name: Download linuxdeploy
        run: |
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage \
            -O linuxdeploy.AppImage
          chmod +x linuxdeploy.AppImage

      - name: Prepare AppDir layout
        run: |
          mkdir -p AppDir/usr/bin \
                   AppDir/usr/share/applications \
                   AppDir/usr/share/icons/hicolor/256x256/apps

          cp "publish/linux/Multi Saves Backup Tool" AppDir/usr/bin/MultiSavesBackupTool
          chmod +x AppDir/usr/bin/MultiSavesBackupTool
          cp publish/linux/*.so AppDir/usr/bin/

          sudo apt-get update -qq && sudo apt-get install -y -qq imagemagick
          convert "Multi Saves Backup Tool/Assets/avalonia-logo.ico[0]" \
                  -resize 256x256 AppDir/usr/share/icons/hicolor/256x256/apps/multisavesbackup.png

          cat > AppDir/usr/share/applications/multisavesbackup.desktop <<EOF
          [Desktop Entry]
          Name=Multi Saves Backup
          Exec=MultiSavesBackupTool
          Icon=multisavesbackup
          Type=Application
          Categories=Utility;
          EOF

      - name: Build AppImage
        run: |
          ./linuxdeploy.AppImage \
            --appdir AppDir \
            --desktop-file AppDir/usr/share/applications/multisavesbackup.desktop \
            --executable AppDir/usr/bin/MultiSavesBackupTool \
            --output appimage

      - name: Rename Linux AppImage
        id: rename-linux
        run: |
          mkdir -p installer
          FILE=$(ls -1 *.AppImage | head -n1)
          mv "$FILE" installer/Multi_Saves_Backup-x86_64.AppImage
          echo "::set-output name=file::installer/Multi_Saves_Backup-x86_64.AppImage"

      - name: Verify AppImage
        run: test -f "installer/Multi_Saves_Backup-x86_64.AppImage"

  build-macos:
    name: Build macOS .dmg
    runs-on: lukimacos
    steps:
      - name: Clean previous artifacts
        run: rm -rf publish installer || true

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Publish Tool
        run: |
          dotnet publish "Multi Saves Backup Tool/Multi Saves Backup Tool.csproj" \
            -c Release -r osx-x64 --self-contained true \
            -p:PublishSingleFile=true -p:DebugType=None -p:DebugSymbols=false \
            -o "publish/macos"

      - name: Create .app bundle
        run: |
          APP_NAME="MSBT"
          APP_BIN="Multi Saves Backup Tool"
          APP_DIR="publish/macos/$APP_NAME.app"
          mkdir -p "$APP_DIR/Contents/MacOS" "$APP_DIR/Contents/Resources"
          cp "publish/macos/$APP_BIN" "$APP_DIR/Contents/MacOS/$APP_NAME"
          cat > "$APP_DIR/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" \
              "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleName</key><string>$APP_NAME</string>
            <key>CFBundleExecutable</key><string>$APP_NAME</string>
            <key>CFBundleIdentifier</key><string>com.luki.msbt</string>
            <key>CFBundleVersion</key><string>1.0</string>
            <key>CFBundlePackageType</key><string>APPL</string>
            <key>LSMinimumSystemVersion</key><string>10.13</string>
          </dict></plist>
          EOF

      - name: Create .dmg
        run: |
          mkdir -p installer
          hdiutil create -volname "MSBT" \
                         -srcfolder "publish/macos/MSBT.app" \
                         -ov -format UDZO installer/MSBT.dmg

      - name: Rename macOS DMG
        id: rename-mac
        run: |
          echo "::set-output name=file::installer/MSBT.dmg"

      - name: Verify DMG
        run: test -f "installer/MSBT.dmg"

  createrelease:
    name: Create GitHub Release
    runs-on: lukilinux
    needs:
      - build-windows
      - build-linux
      - build-macos
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}.0.0.0
          name: Release v${{ github.run_number }}.0.0.0
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  uploadwindows:
    name: Upload Windows installer
    runs-on: lukiwin
    needs:
      - createrelease
      - build-windows
      - build-linux
      - build-macos
    steps:
      - name: Upload Windows installer
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}.0.0.0
          files: installer/MultiSavesBackupSetup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  uploadlinux:
    name: Upload Linux installer
    runs-on: lukilinux
    needs:
      - createrelease
      - build-windows
      - build-linux
      - build-macos
    steps:
      - name: Upload Linux AppImage
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}.0.0.0
          files: installer/Multi_Saves_Backup-x86_64.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  uploadmacos:
    name: Upload MacOS installer
    runs-on: lukimacos
    needs:
      - createrelease
      - build-windows
      - build-linux
      - build-macos
    steps:
      - name: Upload Linux AppImage
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}.0.0.0
          files: installer/MSBT.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}